#!/usr/bin/env node

/*!
 * git-contributors (0.2.3) - 2015-06-14
 * https://github.com/davidlinse/git-contributors.js.git
 * Copyright (c) 2014 David Linse; License: MIT
 */

/**
 * git-contributors module
 */

var fs    = require('fs'),
    path  = require('path'),
    git   = require('../lib/gitlog'),
    _     = require('lodash');
var Q     = require('q');

var verifyRepositoryExists = function() {
  'use strict';

  var deferred = Q.defer();
  var repo     = path.join(program.cwd, '.git');
  var ok       = fs.existsSync(program.cwd) && fs.existsSync(repo);

  if (ok) { deferred.resolve(program); }
  else {
    deferred.reject(
      new Error('Could not find .git repository at "'+ program.cwd +'"')
    );
  }

  return deferred.promise;
};

var processLog = function(stdout) {
  'use strict';

  function getCommittersFrom(entries) {
    var list = {};
    var total   = _.size(entries);
    for (var i=0; i < total; i+=2) {
      var s = entries[i];
      var committer = list[s];
      var parts;
      if (!_.isObject(committer)) {
        committer = list[s] = {};
        parts   = s.split(' ');
        committer.email = _.last(parts);
        committer.name = _.without(parts, committer.email).join(' ');
        committer.deletions = 0;
        committer.insertions = 0;
        committer.commits = 0;
      }
      committer.commits +=1;
      s = entries[i+1];
      parts = s.match(/([\d]+)\s*insertion/);
      parts && (committer.insertions += parseInt(parts[1]));
      parts = s.match(/([\d]+)\s*deletion/);
      parts && (committer.deletions += parseInt(parts[1]));
    }
    return _.map(list);
  }

  var deferred = Q.defer();

  var entries = _.compact(stdout.split('\n')),
      list = getCommittersFrom(entries);
  deferred.resolve(list);

  return deferred.promise;
};

var format = function(data) {
  'use strict';

  var deferred = Q.defer();

  if (program.markdown === true) {
    data = require('../lib/markdown-reporter').format(data, program);
  }

  if (program.json === true) {
    data = JSON.stringify(data);
  }
  deferred.resolve(data);

  return deferred.promise;
};

var filter = function(data) {
  'use strict';

  var deferred = Q.defer();

  var stripEmail = function(el) {
    return _.omit(el, 'email');
  };

  if (program.email === false) {
    data = _.map(data, stripEmail);
  }

  deferred.resolve(data);

  return deferred.promise;
};

//--

var program = {
  timeout: 5000,
  cwd: '.',
  maxBuffer: 25000 * 1024
};


var GitContributors = function GitContributors () {};

GitContributors.prototype.list = function(opts, cb) {
  'use strict';

  program.markdown = null;
  program.json = null;

  if (_.isString(opts)) {
    program.cwd = opts;
  }
  else {
    program = _.merge(program, opts);
  }

  Q()
  .then(verifyRepositoryExists)
  .then(git.log)
  .then(processLog)
  .then(filter)
  .then(format)
  .done(function(result) {
    cb(null, result);
  }, function(err) {
    cb(err, null);
  });
};

module.exports.GitContributors = GitContributors;
module.exports.gitContributors = new GitContributors();


// binary

if (!module.parent) {

  var fs      = require('fs');
  var pkg     = path.resolve(__dirname  + '/../package.json');

  var version = JSON.parse(fs.readFileSync(pkg, 'utf-8')).version;

  program = _.merge(require('../lib/_cli').parse(process.argv, version), program);
  program.cwd = _.first(program.args);

  var success = function(result) {
    'use strict';
    console.log(result);
  };

  Q()
  .then(verifyRepositoryExists)
  .then(git.log)
  .then(processLog)
  .then(filter)
  .then(format)
  .then(success)
  .catch(function(err){
    'use strict';
    console.log(err.message);
    process.exit(1);
  });
}

